name: 'release'

on:
  workflow_dispatch:
    inputs:
      changelog:
        type: string
        description: 'The frontend changelog'
        required: true

  push:
    branches:
      - 'main'
      - 'alpha'
jobs:
  prepare-vis3:
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.dry-run.outputs.NEXT_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-node@v4
        with:
          node-version: 20.8.1

      - name: Vis3 Semantic Release dry-run
        id: dry-run
        run: |
          npm i -g @semantic-release/exec @semantic-release/commit-analyzer @semantic-release/git semantic-release
          semantic-release --dry-run --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prepare-vis3-kit:
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.dry-run.outputs.NEXT_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-node@v4
        with:
          node-version: 20.8.1

      - name: Vis3-kit Semantic Release dry-run
        id: dry-run
        run: |
          npm i -g @semantic-release/exec @semantic-release/commit-analyzer @semantic-release/git @semantic-release/npm semantic-release
          cd web/packages/vis3-kit
          semantic-release --dry-run --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-vis3:
    needs: prepare-vis3
    if: ${{ needs.prepare-vis3.outputs.NEXT_VERSION != '' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11]
        poetry-version: ['2.0.1']
        os: [ubuntu-24.04]
        node-version: [20.8.1]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get next version
        id: get-next-version
        run: |
          echo "NEXT_VERSION=$(echo "${{ needs.prepare-vis3.outputs.NEXT_VERSION }}")" >> $GITHUB_ENV

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd web
          pnpm install

      - name: Build frontend
        env:
          CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          cd web
          pnpm run build

        # ====================== release ======================

      - name: Set release pip url
        if: ${{ github.ref_name == 'main' || github.ref_name == 'alpha' }}
        env:
          NEXT_VERSION: ${{ env.NEXT_VERSION }}
        run: |
          echo "PYPI_URL=https://pypi.org/project/vis3/${{ env.NEXT_VERSION }}" >> $GITHUB_ENV

      - name: Show pypi url
        run: |
          echo $PYPI_URL

      - uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install dependencies
        run: poetry install

      # - name: Run tests
      #   run: poetry run pytest --cov=./ --cov-report=xml

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
      #     files: ./coverage.xml
      #     verbose: true

      - name: Manage version
        run: |
          sed -i "s/^version[ ]*=.*/version = '${NEXT_VERSION}'/" pyproject.toml
          sed -i "s/^version[ ]*=.*/version='${NEXT_VERSION}'/" vis3/version.py
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${NEXT_VERSION}\"/" web/package.json

      - name: Publish to PyPi
        # main or alpha
        if: ${{ github.ref_name == 'main' || github.ref_name == 'alpha' }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build --skip-existing

      - name: Release vis3
        run: |
          npm i -g semantic-release @semantic-release/git @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec @semantic-release/github
          semantic-release --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ====================== post release ======================
      
      - name: Send release notification
        env:
          CHANGELOG: ${{ github.event.inputs.changelog != '' && format('## Frontend changelog👇🏻 \n\n{0}\n\n\n', github.event.inputs.changelog) || '' }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          RELEASE_NOTES: ${{ env.RELEASE_NOTES }}
          NEXT_VERSION: ${{ env.NEXT_VERSION }}
          PYPI_URL: ${{ env.PYPI_URL }}
        run: |
          node ./scripts/release-notification.js
          
  release-vis3-kit:
    needs: prepare-vis3-kit
    if: ${{ github.event.head_commit.modified_files == 'web' && needs.prepare-vis3-kit.outputs.NEXT_VERSION != '' && (github.ref_name == 'main' || github.ref_name == 'alpha') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get next version
        id: get-next-version
        run: |
          echo "NEXT_VERSION=$(echo "${{ needs.prepare-vis3-kit.outputs.NEXT_VERSION }}")" >> $GITHUB_ENV


      - name: update vis3-kit version
        run: |
          cd web/app
          # update vis3-kit version in package.json
          sed -i "s/\"@vis3\/kit\": \"[^\"]*\"/\"@vis3\/kit\": \"${NEXT_VERSION}\"/" package.json

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Release vis3-kit
        run: |
          cd web/packages/vis3-kit
          pnpm install
          pnpm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}