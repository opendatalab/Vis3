/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as LocalIndexImport } from './routes/local/index'
import { Route as KeychainIndexImport } from './routes/keychain/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const LocalIndexRoute = LocalIndexImport.update({
  id: '/local/',
  path: '/local/',
  getParentRoute: () => rootRoute,
} as any)

const KeychainIndexRoute = KeychainIndexImport.update({
  id: '/keychain/',
  path: '/keychain/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/keychain/': {
      id: '/keychain/'
      path: '/keychain'
      fullPath: '/keychain'
      preLoaderRoute: typeof KeychainIndexImport
      parentRoute: typeof rootRoute
    }
    '/local/': {
      id: '/local/'
      path: '/local'
      fullPath: '/local'
      preLoaderRoute: typeof LocalIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/keychain': typeof KeychainIndexRoute
  '/local': typeof LocalIndexRoute
  '/login': typeof LoginIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/keychain': typeof KeychainIndexRoute
  '/local': typeof LocalIndexRoute
  '/login': typeof LoginIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/keychain/': typeof KeychainIndexRoute
  '/local/': typeof LocalIndexRoute
  '/login/': typeof LoginIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/keychain' | '/local' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/keychain' | '/local' | '/login'
  id: '__root__' | '/' | '/keychain/' | '/local/' | '/login/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  KeychainIndexRoute: typeof KeychainIndexRoute
  LocalIndexRoute: typeof LocalIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  KeychainIndexRoute: KeychainIndexRoute,
  LocalIndexRoute: LocalIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/keychain/",
        "/local/",
        "/login/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/keychain/": {
      "filePath": "keychain/index.tsx"
    },
    "/local/": {
      "filePath": "local/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
